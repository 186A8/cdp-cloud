version: "3"
services:
  filebeat:
    image: elastic/filebeat:6.7.1
    container_name: filebeat
    hostname: filebeat
    restart: on-failure
    user: root
    volumes:
      - /root/docker/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /root/docker/filebeat/logs/filebeat:/logs:ro
#    environment:
#      - output.elasticsearch.hosts=["elasticsearch:9200"]
#      - output.logstash.enabled=false
#      - setup.kibana.host=kibana:5601
    # disable strict permission checks
    command: ["--strict.perms=false"]
#    ports:
#      - 5601:5601
    networks:
      - anan-bridge
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:6.7.1
    container_name: kibana
    hostname: kibana
    restart: on-failure
    environment:
      - I18N_LOCALE=zh-CN
#      -SERVER_NAME=kibana.example.org
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      - anan-bridge
    depends_on:
      - elasticsearch

  elasticsearch:
    image: elasticsearch:6.7.1
    container_name: elasticsearch
    hostname: elasticsearch
    restart: on-failure
    environment:
#      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - /root/docker/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - anan-bridge

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    hostname: zipkin
    restart: on-failure
    environment:
      - STORAGE_TYPE=elasticsearch
      # Point the zipkin at the storage backend
      - ES_HOSTS=elasticsearch
#      - RABBIT_CONNECTION_TIMEOUT=60000
#      - RABBIT_VIRTUAL_HOST=/
#      - RABBIT_USE_SSL=false
#      - RABBIT_QUEUE=zipkin
      # Uncomment to see requests to and from elasticsearch
      # - ES_HTTP_LOGGING=BODY
      - RABBIT_ADDRESSES=rabbitmq:5672
      - RABBIT_USER=anan
      - RABBIT_PASSWORD=local
    networks:
      - anan-bridge
    depends_on:
      - elasticsearch
      - rabbitmq
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - 9411:9411
      # Uncomment if you set SCRIBE_ENABLED=true
      # - 9410:9410

  anan-platform-mysql:
    container_name: anan-platform-mysql
    hostname: anan-platform-mysql
    image: registry.cn-hangzhou.aliyuncs.com/fosin/anan-platform-mysql:2.0.0-SNAPSHOT
    build:
      context:  docker/mysql/
    environment:
      - MYSQL_ROOT_PASSWORD=local
      - TZ=Asia/Shanghai
    volumes:
      - /root/docker/mysql/anan_platform/data:/var/lib/mysql
      - /root/docker/mysql/anan_platform/mysqld.cnf:/etc/mysql/conf.d/mysqld.cnf
      - /root/docker/mysql/anan_platform/logs:/var/log/mysql
    restart: on-failure
    ports:
      - 3306:3306
    networks:
      - anan-bridge

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG
      - RABBITMQ_DEFAULT_USER=anan
      - RABBITMQ_DEFAULT_PASS=local
      - RABBITMQ_DEFAULT_VHOST=/
      - TZ=Asia/Shanghai
    #    volumes: TODO 启动后报错cookie file /var/lib/rabbitmq/.erlang.cookie must be accessible by owner only
    #      - /root/docker/rabbitmq:/var/lib/rabbitmq
    restart: on-failure
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - anan-bridge

  nginx:
    container_name: nginx
    image: nginx:1.15
    hostname: nginx
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - /root/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
#      - /root/docker/nginx/monitor.conf:/etc/nginx/conf.d/monitor.conf
      - /root/docker/nginx/html:/usr/share/nginx/html
    ports:
      - 80:80
    networks:
      - anan-bridge

  redis:
    image: redis:4.0
    container_name: redis
    hostname: redis
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - /root/docker/redis:/data
    restart: on-failure
    ports:
      - 6379:6379
    command: redis-server --appendonly yes --requirepass local
    networks:
      - anan-bridge

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - /root/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    #      - /root/docker/prometheus/data:/prometheus TODO 不能挂载外部目录，报错
    restart: on-failure
    privileged: true
    depends_on:
      - cadvisor
      - node-exporter
    ports:
      - 9090:9090
    networks:
      - anan-bridge

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    restart: on-failure
    environment:
      - TZ=Asia/Shanghai
      - NODE_ID={{.Node.ID}}
    cap_add:
      - SYS_TIME
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    networks:
      - anan-bridge

  grafana:
    image: grafana/grafana:6.1.3
    container_name: grafana
    hostname: grafana
    volumes:
      - /root/docker/grafana:/var/lib/grafana
    environment:
      - GF_SERVER_ROOT_URL=http://grafana.server.name
      - GF_SECURITY_ADMIN_PASSWORD=local
      - GF_USERS_ALLOW_SIGN_UP='false'
    restart: on-failure
    ports:
      - 3000:3000
    networks:
      - anan-bridge

  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    hostname: cadvisor
    environment:
      - TZ=Asia/Shanghai
    restart: on-failure
    privileged: true
    volumes:
      - /dev/disk/:/dev/disk:ro
      - /cgroup:/cgroup:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - anan-bridge

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    hostname: alertmanager
    restart: on-failure
    ports:
      - 9093:9093
    networks:
      - anan-bridge
    environment:
      - SLACK_URL=${SLACK_URL:-https://hooks.slack.com/services/TOKEN}
      - SLACK_CHANNEL=${SLACK_CHANNEL:-devops-alerts}
      - SLACK_USER=${SLACK_USER:-alertmanager}
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
#    volumes:
#      - /root/docker/alertmanager/data:/alertmanager
  #    - /root/docker/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml

  unsee:
    container_name: unsee
    hostname: unsee
    image: cloudflare/unsee:v0.8.0
    restart: on-failure
    networks:
      - anan-bridge
    environment:
      - TZ=Asia/Shanghai
      - "ALERTMANAGER_URIS=default:http://alertmanager:9093"

  anan-eurekaserver:
    image: registry.cn-hangzhou.aliyuncs.com/fosin/anan-eurekaserver:2.0.0-SNAPSHOT
    container_name: anan-eurekaserver
    hostname: anan-eurekaserver
    restart: on-failure
    networks:
      - anan-bridge
    volumes:
      - /root/docker/logs/anan:/logs
    ports:
      - 51000:51000

  anan-configserver:
    image: registry.cn-hangzhou.aliyuncs.com/fosin/anan-configserver:2.0.0-SNAPSHOT
    container_name: anan-configserver
    hostname: anan-configserver
    restart: on-failure
    ports:
      - 51100:51100
    environment:
      - spring.cloud.config.server.native.search-locations=file:/anan-config
    volumes:
      - /root/docker/logs/anan:/logs
      - /root/docker/anan-config:/anan-config
    networks:
      - anan-bridge
    depends_on:
      - anan-eurekaserver
      - rabbitmq

  anan-zuulgateway:
    image: registry.cn-hangzhou.aliyuncs.com/fosin/anan-zuulgateway:2.0.0-SNAPSHOT
    container_name: anan-zuulgateway
    hostname: anan-zuulgateway
    restart: on-failure
    ports:
      - 9000:9000
    volumes:
      - /root/docker/logs/anan:/logs
    networks:
      - anan-bridge
    depends_on:
      - anan-configserver
      - anan-platform-mysql

  anan-authserver:
    image: registry.cn-hangzhou.aliyuncs.com/fosin/anan-authserver:2.0.0-SNAPSHOT
    container_name: anan-authserver
    hostname: anan-authserver
    restart: on-failure
    ports:
      - 51400:51400
    volumes:
      - /root/docker/logs/anan:/logs
    networks:
      - anan-bridge
    depends_on:
      - anan-configserver
      - redis
      - anan-platform-mysql

  anan-platformserver:
    image: registry.cn-hangzhou.aliyuncs.com/fosin/anan-platformserver:2.0.0-SNAPSHOT
    container_name: anan-platformserver
    hostname: anan-platformserver
    restart: on-failure
    volumes:
      - /root/docker/logs/anan:/logs
    ports:
      - 51500:51500
    networks:
      - anan-bridge
    depends_on:
      - anan-configserver
      - redis
      - anan-platform-mysql

  anan-adminserver:
    image: registry.cn-hangzhou.aliyuncs.com/fosin/anan-adminserver:2.0.0-SNAPSHOT
    container_name: anan-adminserver
    hostname: anan-adminserver
    restart: on-failure
    volumes:
      - /root/docker/logs/anan:/logs
    ports:
      - 51700:51700
    networks:
      - anan-bridge
    depends_on:
      - anan-zuulgateway

networks:
  anan-bridge:
    external: true